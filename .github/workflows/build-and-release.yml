name: Build and release
on: push

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest

      - name: Build edge version
        id: build_edge_version
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_USERNAME: 'boky'
          DOCKER_PASSWORD: '${{ secrets.DOCKER_ACCESS_TOKEN }}'
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled
          PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le"
        run: ./build-docker.sh -t boky/socketace:edge --push --build-arg "GORELEASER_EXTRA_ARGS=--snapshot"

      - name: Extract tag names
        id: extract_tag_names
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        # TODO: This code assumes that the most recent tag pushed is also the latest version of the app.
        # This might not always be the case. What we would nedd to do is check if there are any semver
        # tags in front of us and if so, do not set the laster-major-minor docker tags approperiately.
        #
        # Quick Google search did not find anything useful on the topic.
        run: |
          export TAG="${GITHUB_REF:10}"
          if [[ "$TAG" == v* ]]; then
            # Remove "v" from the beginning
            TAG=$(echo "$TAG" | cut -c2-)
            export TAGS="-t boky/socketace:latest"
            while [[ -n "$TAG" ]]; do
              TAGS="$TAGS -t boky/socketace:$TAG"
              TAG=$(echo "$TAG" | rev | cut -d. -f2- | rev)
            done
            echo "::set-env name=TAGS::$TAGS"
          else
            echo "::set-env name=DO_BUILD_TAG::"
          fi

          echo "::set-env name=DO_BUILD_TAG::1"

      - name: Build tagged version
        id: build_tagged_version
        if: env.DO_BUILD_TAG == '1'
        env:
          DOCKER_USERNAME: 'boky'
          DOCKER_PASSWORD: '${{ secrets.DOCKER_ACCESS_TOKEN }}'
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled
          PLATFORMS: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le"
        run: ./build-docker.sh $TAGS --push

# if: github.event_name != 'pull_request'
# if: startsWith(github.ref, 'refs/tags/')
#      - name: Extract branch name
#        if: github.event_name != 'pull_request'
#        shell: bash
#        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"
#        id: extract_branch

  artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Go
        id: setup_go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"

      - name: Get go version
        id: get_go_version
        shell: bash
        run: echo "::set-env name=GOVERSION::$(go version)"

      - name: Compile only linux/amd64
        id: update_goreleaser_yml
        shell: bash
        run: |
          sed -i -e "s/^    goos:.*\$/    goos: [ 'linux' ]/" .goreleaser.yml
          sed -i -e "s/^    goarch:.*\$/    goarch: [ 'amd64' ]/" .goreleaser.yml
          sed -i -e "s/^    goarm:.*\$/    goarm: []/" .goreleaser.yml

      - name: Execute quick and dirty compilation to verify everything works
        id: compile
        if: github.ref == 'refs/heads/master'
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --rm-dist --skip-validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Release a new version
        id: compile_and_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --parallelism 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
