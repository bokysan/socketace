server:
  channels:
    - name: ssh
      network: tcp
      address: 127.0.0.1:22
    - name: www
      network: tcp
      address: www.google.com:80
    #- name: socks
    #  type: socks
  servers:
      # Simple HTTP (websocket) proxy. No security. Expose specific channels only
    - kind: http
      listen: 127.0.0.1:9999
      endpoints:
        - channels: [ 'ssh', 'www' ]
          endpoint: /ws/all

      # Simple HTTP (websocket) proxy. No security. Expose ssh channel on /ws/ssh and everything on /ws/everything.
    - kind: http
      listen: 127.0.0.1:9998
      endpoints:
        - channels: [ 'ssh' ]
          endpoint: /ws/ssh
        - endpoint: /ws/everything

      # Simple HTTPS (websocket) proxy. Secured by TLS.
    - kind: https
      listen: 127.0.0.1:9997
      #
      # *** BIG FAT WARNING ***
      #
      # DO NOT USE THE CERTIFICATES AND KEYS IN THIS EXAMPLE. THEY HAVE BEEN PUSHED TO A PUBLIC REPOSITORY AND AS
      # SUCH CAN BE SAFELY ASSUMED COMPROMISED.
      # THIS IS AN EXAMPLE ONLY. USING THESE KEYS IS THE SAME AS HAVING NO ENCRYPTION AT ALL.
      # YOU SHOULD REALLY LOOK UP OPENSSL DOCUMENTATION AND GENERATE THE KEYS AND THE CERTIFICATES YOURSELF.
      #
      certificateFile: cert.pem
      privateKeyFile: privatekey.pem
      privateKeyPassword: test1234
      endpoints:
        - endpoint: /ws/all

      # Simple HTTP (websocket) proxy. Secured by StartTLS.
    - kind: http
      listen: 127.0.0.1:9996
      #
      # *** BIG FAT WARNING ***
      #
      # DO NOT USE THE CERTIFICATES AND KEYS IN THIS EXAMPLE. THEY HAVE BEEN PUSHED TO A PUBLIC REPOSITORY AND AS
      # SUCH CAN BE SAFELY ASSUMED COMPROMISED.
      # THIS IS AN EXAMPLE ONLY. USING THESE KEYS IS THE SAME AS HAVING NO ENCRYPTION AT ALL.
      # YOU SHOULD REALLY LOOK UP OPENSSL DOCUMENTATION AND GENERATE THE KEYS AND THE CERTIFICATES YOURSELF.
      #
      certificateFile: cert.pem
      privateKeyFile: privatekey.pem
      privateKeyPassword: test1234
      endpoints:
        - endpoint: /ws/all

      # Simple socket proxy. No security. Expose all channels.
    - kind: tcp
      listen: 127.0.0.1:9995

      # Simple socket proxy. Secure by directly encrypting the socket.
    - kind: tcp+tls
      listen: 127.0.0.1:9994
      #
      # *** BIG FAT WARNING ***
      #
      # DO NOT USE THE CERTIFICATES AND KEYS IN THIS EXAMPLE. THEY HAVE BEEN PUSHED TO A PUBLIC REPOSITORY AND AS
      # SUCH CAN BE SAFELY ASSUMED COMPROMISED.
      # THIS IS AN EXAMPLE ONLY. USING THESE KEYS IS THE SAME AS HAVING NO ENCRYPTION AT ALL.
      # YOU SHOULD REALLY LOOK UP OPENSSL DOCUMENTATION AND GENERATE THE KEYS AND THE CERTIFICATES YOURSELF.
      #
      certificateFile: cert.pem
      privateKeyFile: privatekey.pem
      privateKeyPassword: test1234

      # Simple socket proxy. Secured by StartTLS.
    - kind: tcp
      listen: 127.0.0.1:9993
      #
      # *** BIG FAT WARNING ***
      #
      # DO NOT USE THE CERTIFICATES AND KEYS IN THIS EXAMPLE. THEY HAVE BEEN PUSHED TO A PUBLIC REPOSITORY AND AS
      # SUCH CAN BE SAFELY ASSUMED COMPROMISED.
      # THIS IS AN EXAMPLE ONLY. USING THESE KEYS IS THE SAME AS HAVING NO ENCRYPTION AT ALL.
      # YOU SHOULD REALLY LOOK UP OPENSSL DOCUMENTATION AND GENERATE THE KEYS AND THE CERTIFICATES YOURSELF.
      #
      certificateFile: cert.pem
      privateKeyFile: privatekey.pem
      privateKeyPassword: test1234

      # Simple socket proxy. Secured by StartTLS.
    - kind: stdin
      #
      # *** BIG FAT WARNING ***
      #
      # DO NOT USE THE CERTIFICATES AND KEYS IN THIS EXAMPLE. THEY HAVE BEEN PUSHED TO A PUBLIC REPOSITORY AND AS
      # SUCH CAN BE SAFELY ASSUMED COMPROMISED.
      # THIS IS AN EXAMPLE ONLY. USING THESE KEYS IS THE SAME AS HAVING NO ENCRYPTION AT ALL.
      # YOU SHOULD REALLY LOOK UP OPENSSL DOCUMENTATION AND GENERATE THE KEYS AND THE CERTIFICATES YOURSELF.
      #
      certificateFile: cert.pem
      privateKeyFile: privatekey.pem
      privateKeyPassword: test1234
